

# locals {
#   firewall_snets = {
#     for firewall_snet_name, firewall_snet in local.subnets : firewall_snet_name => merge(
#       {
#         name            = firewall_snet_name,
#         firewall_tags   = lookup(firewall_snet, "tags", {}),
#         firewall_policy = lookup(firewall_snet, "firewall_policy", {}),
#         group_metadata  = lookup(lookup(local.group, lookup(firewall_snet, "group", "group-not-defined"), {}), "metadata", {}),
#         group_tags      = lookup(lookup(local.group, lookup(firewall_snet, "group", "group-not-defined"), {}), "tags", {}),
#       },
#       firewall_snet
#     )
#     if firewall_snet.firewall_deploy == true
#   }
# }
# output "test" {
#     value = local.firewalls
# }

# resource "aws_networkfirewall_firewall" "tgw_hub_firewall" {
#   for_each = {
#     for vpc_name, vpc in local.networks : vpc_name => vpc
#     if lookup(vpc, "firewall_definition", null) != null
#   }
#   name                = "network-firewall-${each.value.name}"
#   firewall_policy_arn = aws_networkfirewall_firewall_policy.tgw_hub_fw_policy[each.value.name].arn
#   vpc_id              = aws_vpc.vpc[each.value.name].id
#   dynamic "subnet_mapping" {
#     for_each = {
#       for firewall_snet_name, firewall_snet in local.firewall_snets : firewall_snet_name => firewall_snet
#     }
#     content {
#       subnet_id = aws_subnet.subnet[firewall_snet].id
#     }
#   }

#   tags = merge(
#     { "IaC" = "Terraform" },
#     lookup(each.value, "group_tags", {}),
#     lookup(each.value, "tags", {}),
#   )
# }
